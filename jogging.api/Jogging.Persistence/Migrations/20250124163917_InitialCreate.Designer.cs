// <auto-generated />
using System;
using Jogging.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jogging.Persistence.Migrations
{
    [DbContext(typeof(JoggingContext))]
    [Migration("20250124163917_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Jogging.Persistence.Models.Account.Profile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.HasKey("ProfileId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Address.SimpleAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("AddressId")
                        .HasName("PRIMARY");

                    b.ToTable("address", (string)null);

                    b.HasDiscriminator().HasValue("SimpleAddress");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.AgeCategory.SimpleAgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("agecategory", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.AuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("auth_users", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Competition.SimpleCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text")
                        .HasColumnName("img_url");

                    b.Property<string>("Information")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("RankingActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "AddressId");

                    b.ToTable("competition", (string)null);

                    b.HasDiscriminator().HasValue("SimpleCompetition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.CompetitionPerCategory.SimpleCompetitionpercategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<float?>("DistanceInKm")
                        .HasColumnType("float");

                    b.Property<string>("DistanceName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("GunTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AgeCategoryId" }, "AgeCategoryId");

                    b.HasIndex(new[] { "CompetitionId" }, "CompetitionId");

                    b.ToTable("competitionpercategory", (string)null);

                    b.HasDiscriminator().HasValue("SimpleCompetitionpercategory");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Person.SimplePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Ibannumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IBANNumber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RunningClubId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "AddressId")
                        .HasDatabaseName("AddressId1");

                    b.HasIndex(new[] { "SchoolId" }, "SchoolId");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "FirstName" }, "idx_person_firstname");

                    b.HasIndex(new[] { "LastName" }, "idx_person_lastname");

                    b.HasIndex(new[] { "RunningClubId" }, "person_ibfk_3");

                    b.ToTable("person", (string)null);

                    b.HasDiscriminator().HasValue("SimplePerson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Personview", b =>
                {
                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("varchar(101)")
                        .HasColumnName("fullname")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Ibannumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IBANNumber");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.ToTable((string)null);

                    b.ToView("personview", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Registration.PersonRegistration", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("CompetitionId");

                    b.Property<int>("CompetitionPerCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CompetitionPerCategoryId");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool?>("Paid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Paid");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<short?>("RunNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("RunNumber");

                    b.Property<TimeSpan?>("RunTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("RunTime");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonRegistrations");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Registration.SimpleRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionPerCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<short?>("RunNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("RunTime")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompetitionId" }, "CompetitionId")
                        .HasDatabaseName("CompetitionId1");

                    b.HasIndex(new[] { "CompetitionPerCategoryId" }, "CompetitionPerCategoryId");

                    b.HasIndex(new[] { "PersonId" }, "PersonId");

                    b.HasIndex(new[] { "RunNumber", "CompetitionId" }, "RunNumber")
                        .IsUnique();

                    b.ToTable("registration", (string)null);

                    b.HasDiscriminator().HasValue("SimpleRegistration");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Runningclub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminChecked")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("blob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("runningclub", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.School.SimpleSchool", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SchoolId")
                        .HasName("PRIMARY");

                    b.ToTable("school", (string)null);

                    b.HasDiscriminator().HasValue("SimpleSchool");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.SearchModels.Registration.ExtendedRegistrationSearchByPerson", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressId");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("City");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("CompetitionId");

                    b.Property<int>("CompetitionPerCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CompetitionPerCategoryId");

                    b.Property<string>("DistanceName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DistanceName");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Gender");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("HouseNumber");

                    b.Property<string>("IbanNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IbanNumber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LastName");

                    b.Property<bool?>("Paid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Paid");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationId");

                    b.Property<short?>("RunNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("RunNumber");

                    b.Property<TimeSpan?>("RunTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("RunTime");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("SchoolId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Street");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext")
                        .HasColumnName("UserId");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ZipCode");

                    b.ToTable((string)null);

                    b.ToView("extended_registration_search_by_person_view", (string)null);
                });

            modelBuilder.Entity("Jogging.Persistence.Models.SearchModels.Result.ExtendedResultFunctionResponse", b =>
                {
                    b.Property<string>("AgeCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompetitionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DistanceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("RunTime")
                        .HasColumnType("time(6)");

                    b.ToTable("ExtendedResultFunctions");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Address.ExtendedAddress", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.Address.SimpleAddress");

                    b.HasDiscriminator().HasValue("ExtendedAddress");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Competition.ExtendedCompetition", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.Competition.SimpleCompetition");

                    b.ToTable("competition", (string)null);

                    b.HasDiscriminator().HasValue("ExtendedCompetition");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.CompetitionPerCategory.ExtendedCompetitionpercategory", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.CompetitionPerCategory.SimpleCompetitionpercategory");

                    b.ToTable("competitionpercategory", (string)null);

                    b.HasDiscriminator().HasValue("ExtendedCompetitionpercategory");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Person.ExtendedPerson", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.Person.SimplePerson");

                    b.ToTable("person", (string)null);

                    b.HasDiscriminator().HasValue("ExtendedPerson");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Registration.ExtendedRegistration", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.Registration.SimpleRegistration");

                    b.ToTable("registration", (string)null);

                    b.HasDiscriminator().HasValue("ExtendedRegistration");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.School.ExtendedSchool", b =>
                {
                    b.HasBaseType("Jogging.Persistence.Models.School.SimpleSchool");

                    b.ToTable("school", (string)null);

                    b.HasDiscriminator().HasValue("ExtendedSchool");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Registration.PersonRegistration", b =>
                {
                    b.HasOne("Jogging.Persistence.Models.Competition.ExtendedCompetition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jogging.Persistence.Models.Person.ExtendedPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Competition.ExtendedCompetition", b =>
                {
                    b.HasOne("Jogging.Persistence.Models.Address.ExtendedAddress", "Address")
                        .WithMany("Competitions")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("competition_ibfk_1");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.CompetitionPerCategory.ExtendedCompetitionpercategory", b =>
                {
                    b.HasOne("Jogging.Persistence.Models.AgeCategory.SimpleAgeCategory", "AgeCategory")
                        .WithMany("Competitionpercategories")
                        .HasForeignKey("AgeCategoryId")
                        .HasConstraintName("competitionpercategory_ibfk_1");

                    b.HasOne("Jogging.Persistence.Models.Competition.ExtendedCompetition", "Competition")
                        .WithMany("Competitionpercategories")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("competitionpercategory_ibfk_2");

                    b.Navigation("AgeCategory");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Person.ExtendedPerson", b =>
                {
                    b.HasOne("Jogging.Persistence.Models.Address.ExtendedAddress", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("person_ibfk_1");

                    b.HasOne("Jogging.Persistence.Models.Runningclub", "RunningClub")
                        .WithMany("People")
                        .HasForeignKey("RunningClubId")
                        .HasConstraintName("person_ibfk_3");

                    b.HasOne("Jogging.Persistence.Models.School.ExtendedSchool", "School")
                        .WithMany("People")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("person_ibfk_2");

                    b.HasOne("Jogging.Persistence.Models.Account.Profile", "Profile")
                        .WithOne("Person")
                        .HasForeignKey("Jogging.Persistence.Models.Person.ExtendedPerson", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Profile");

                    b.Navigation("RunningClub");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Registration.ExtendedRegistration", b =>
                {
                    b.HasOne("Jogging.Persistence.Models.Competition.ExtendedCompetition", "Competition")
                        .WithMany("Registrations")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("registration_ibfk_3");

                    b.HasOne("Jogging.Persistence.Models.CompetitionPerCategory.ExtendedCompetitionpercategory", "CompetitionPerCategory")
                        .WithMany("Registrations")
                        .HasForeignKey("CompetitionPerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("registration_ibfk_1");

                    b.HasOne("Jogging.Persistence.Models.Person.ExtendedPerson", "Person")
                        .WithMany("Registrations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("registration_ibfk_2");

                    b.Navigation("Competition");

                    b.Navigation("CompetitionPerCategory");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Account.Profile", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Jogging.Persistence.Models.AgeCategory.SimpleAgeCategory", b =>
                {
                    b.Navigation("Competitionpercategories");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Runningclub", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Address.ExtendedAddress", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Competition.ExtendedCompetition", b =>
                {
                    b.Navigation("Competitionpercategories");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.CompetitionPerCategory.ExtendedCompetitionpercategory", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.Person.ExtendedPerson", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Jogging.Persistence.Models.School.ExtendedSchool", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
